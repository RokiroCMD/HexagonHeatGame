package frames;

import java.awt.Color;
import java.awt.Font;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.Clip;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import utils.Fonts;
import utils.Sounds;

public class FrmMenu extends javax.swing.JFrame {

    /**
     * Creates new form frmMenu
     */
    MainMenuPanel menuPanel;
    ControlesPanel controlrePanel;
    SelectPlayersPanel selectPlayersPanel;

    Clip clip;

    public FrmMenu() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(FrmMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(FrmMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FrmMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        menuPanel = new MainMenuPanel(this);
        menuPanel.setSize(this.getWidth(), this.getHeight());
        menuPanel.setLocation(0, 0);
        this.add(menuPanel);
        this.clip = Sounds.reproduceRemotely(Sounds.MENU_MUSIC);
        clip.loop(Clip.LOOP_CONTINUOUSLY);
        clip.start();
        menuPanel.setVisible(true);
    }

    public void StopMusic() {
        clip.stop();
        clip.flush();
        clip = Sounds.reproduceRemotely(Sounds.MENU_MUSIC);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hexagon Heat - menu");
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        setBounds(0, 0, 784, 592);
    }// </editor-fold>//GEN-END:initComponents

    private void onClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClosing
        StopMusic();
    }//GEN-LAST:event_onClosing

    public void changePanel(int i) {

        switch (i) {
            case 0:
                if (selectPlayersPanel != null) {
                    this.remove(selectPlayersPanel);
                }
                if (controlrePanel != null) {
                    this.remove(controlrePanel);
                }

                menuPanel = new MainMenuPanel(this);
                menuPanel.setSize(this.getWidth(), this.getHeight());
                menuPanel.setLocation(0, 0);
                this.add(menuPanel);

                menuPanel.setVisible(true);

                selectPlayersPanel = null;
                controlrePanel = null;
                break;
            case 1:
                if (menuPanel != null) {
                    this.remove(menuPanel);
                }
                if (controlrePanel != null) {
                    this.remove(controlrePanel);
                }

                selectPlayersPanel = new SelectPlayersPanel(this);
                selectPlayersPanel.setSize(this.getWidth(), this.getHeight());
                selectPlayersPanel.setLocation(0, 0);
                this.add(selectPlayersPanel);

                selectPlayersPanel.setVisible(true);
                
                menuPanel = null;
                controlrePanel = null;
                break;
            case 2:
                
                if (menuPanel != null) {
                    this.remove(menuPanel);
                }
                if (selectPlayersPanel != null) {
                    this.remove(selectPlayersPanel);
                }
                
                controlrePanel = new ControlesPanel(this);
                controlrePanel.setSize(this.getWidth(), this.getHeight());
                controlrePanel.setLocation(0, 0);
                this.add(controlrePanel);

                controlrePanel.setVisible(true);
                
                menuPanel = null;
                selectPlayersPanel = null;
                break;
        }
        revalidate();
        repaint();
    }

    public void startGame(int numPlayers) {
        FrmGame game = new FrmGame(numPlayers);
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
